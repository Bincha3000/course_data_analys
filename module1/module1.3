{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.0, 2.449489742783178, 2.8284271247461903, 3.1622776601683795, 3.4641016151377544, 3.7416573867739413, 4.0, 4.242640687119285]\n"
     ]
    }
   ],
   "source": [
    "minValue = 4 \n",
    "maxValue = 18\n",
    "listValue = []\n",
    "for i in range(minValue, maxValue + 1):\n",
    "    listValue.append(i)\n",
    "for i in range(len(listValue)):\n",
    "    listValue[i] = listValue[i] ** 0.5\n",
    "print(listValue[::2])\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "word = 0\n",
    "listText = []\n",
    "stringText = \"\"\n",
    "queriesText = 'смотреть сериалы онлайн;новости спорта;афиша кино;курс доллара;сериалы этим летом;курс по питону;сериалы про спорт'\n",
    "listText = queriesText.split(\" \")\n",
    "stringText = \";\".join(listText)\n",
    "listText = stringText.split(\";\")\n",
    "for words in listText:\n",
    "    word +=1\n",
    "word"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'смотреть сериалы онлайн,курс доллара,сериалы этим летом,курс по питону,сериалы про спорт'"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queries = \"смотреть сериалы онлайн,новости спорта,афиша кино,курс доллара,сериалы этим летом,курс по питону,сериалы про спорт\"\n",
    "words = ['сериалы', 'курс']\n",
    "result = []\n",
    "queriesList = queries.split(\",\")\n",
    "for request in queriesList:\n",
    "    if words[0] in request or words[1] in request:\n",
    "        result.append(request)     \n",
    "    else:\n",
    "        continue\n",
    "result = \",\".join(result)\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
